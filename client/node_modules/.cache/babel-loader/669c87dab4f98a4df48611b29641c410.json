{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nimport apiConfig from \"./apiConfig\";\nconst axiosClient = axios.create({\n  baseURL: apiConfig.baseUrl,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify({ ...params,\n    api_key: apiConfig.apiKey\n  })\n});\naxiosClient.interceptors.request.use(async config => config);\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/leanings reactjs/a/react-ytb/client/src/api/axiosClient.js"],"names":["axios","queryString","apiConfig","axiosClient","create","baseURL","baseUrl","headers","paramsSerializer","params","stringify","api_key","apiKey","interceptors","request","use","config","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEH,SAAS,CAACI,OADY;AAE/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFsB;AAK/BC,EAAAA,gBAAgB,EAAGC,MAAD,IAChBR,WAAW,CAACS,SAAZ,CAAsB,EAAE,GAAGD,MAAL;AAAaE,IAAAA,OAAO,EAAET,SAAS,CAACU;AAAhC,GAAtB;AAN6B,CAAb,CAApB;AASAT,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkBA,MAAvD;AAEAb,WAAW,CAACU,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CACGE,QAAD,IAAc;AACZ,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC7B,WAAOD,QAAQ,CAACC,IAAhB;AACD;;AAED,SAAOD,QAAP;AACD,CAPH,EAQGE,KAAD,IAAW;AACT,QAAMA,KAAN;AACD,CAVH;AAaA,eAAehB,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\n\r\nimport apiConfig from \"./apiConfig\";\r\n\r\nconst axiosClient = axios.create({\r\n  baseURL: apiConfig.baseUrl,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  paramsSerializer: (params) =>\r\n    queryString.stringify({ ...params, api_key: apiConfig.apiKey }),\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => config);\r\n\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    if (response && response.data) {\r\n      return response.data;\r\n    }\r\n\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}