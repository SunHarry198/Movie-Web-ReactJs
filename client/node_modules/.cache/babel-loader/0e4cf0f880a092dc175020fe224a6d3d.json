{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\leanings reactjs\\\\a\\\\react-ytb\\\\client\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport \"./movie-grid.scss\";\nimport MovieCard from \"../movie-card/MovieCard\";\nimport Button, { OutlineButton } from \"../button/Button\";\nimport Input from \"../input/Input\";\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n\n  const loadMore = async () => {\n    let response = null;\n\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onClick: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\n\nconst MovieSearch = props => {\n  _s2();\n\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : \"\");\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n\n    document.addEventListener(\"keyup\", enterEvent);\n    return () => {\n      document.removeEventListener(\"keyup\", enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter keyword\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MovieSearch, \"c/0hufrRkCIsM6qEPpl26SgtMvM=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = MovieSearch;\nexport default MovieGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/leanings reactjs/a/react-ytb/client/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useState","useEffect","useCallback","useHistory","useParams","MovieCard","Button","OutlineButton","Input","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\n\r\nimport \"./movie-grid.scss\";\r\n\r\nimport MovieCard from \"../movie-card/MovieCard\";\r\nimport Button, { OutlineButton } from \"../button/Button\";\r\nimport Input from \"../input/Input\";\r\n\r\nimport tmdbApi, { category, movieType, tvType } from \"../../api/tmdbApi\";\r\n\r\nconst MovieGrid = (props) => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [totalPage, setTotalPage] = useState(0);\r\n\r\n  const { keyword } = useParams();\r\n\r\n  useEffect(() => {\r\n    const getList = async () => {\r\n      let response = null;\r\n      if (keyword === undefined) {\r\n        const params = {};\r\n        switch (props.category) {\r\n          case category.movie:\r\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\r\n              params,\r\n            });\r\n            break;\r\n          default:\r\n            response = await tmdbApi.getTvList(tvType.popular, { params });\r\n        }\r\n      } else {\r\n        const params = {\r\n          query: keyword,\r\n        };\r\n        response = await tmdbApi.search(props.category, { params });\r\n      }\r\n      setItems(response.results);\r\n      setTotalPage(response.total_pages);\r\n    };\r\n    getList();\r\n  }, [props.category, keyword]);\r\n\r\n  const loadMore = async () => {\r\n    let response = null;\r\n    if (keyword === undefined) {\r\n      const params = {\r\n        page: page + 1,\r\n      };\r\n      switch (props.category) {\r\n        case category.movie:\r\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\r\n            params,\r\n          });\r\n          break;\r\n        default:\r\n          response = await tmdbApi.getTvList(tvType.popular, { params });\r\n      }\r\n    } else {\r\n      const params = {\r\n        page: page + 1,\r\n        query: keyword,\r\n      };\r\n      response = await tmdbApi.search(props.category, { params });\r\n    }\r\n    setItems([...items, ...response.results]);\r\n    setPage(page + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"section mb-3\">\r\n        <MovieSearch category={props.category} keyword={keyword} />\r\n      </div>\r\n      <div className=\"movie-grid\">\r\n        {items.map((item, i) => (\r\n          <MovieCard category={props.category} item={item} key={i} />\r\n        ))}\r\n      </div>\r\n      {page < totalPage ? (\r\n        <div className=\"movie-grid__loadmore\">\r\n          <OutlineButton className=\"small\" onClick={loadMore}>\r\n            Load more\r\n          </OutlineButton>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MovieSearch = (props) => {\r\n  const history = useHistory();\r\n\r\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : \"\");\r\n\r\n  const goToSearch = useCallback(() => {\r\n    if (keyword.trim().length > 0) {\r\n      history.push(`/${category[props.category]}/search/${keyword}`);\r\n    }\r\n  }, [keyword, props.category, history]);\r\n\r\n  useEffect(() => {\r\n    const enterEvent = (e) => {\r\n      e.preventDefault();\r\n      if (e.keyCode === 13) {\r\n        goToSearch();\r\n      }\r\n    };\r\n    document.addEventListener(\"keyup\", enterEvent);\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", enterEvent);\r\n    };\r\n  }, [keyword, goToSearch]);\r\n\r\n  return (\r\n    <div className=\"movie-search\">\r\n      <Input\r\n        type=\"text\"\r\n        placeholder=\"Enter keyword\"\r\n        value={keyword}\r\n        onChange={(e) => setKeyword(e.target.value)}\r\n      />\r\n      <Button className=\"small\" onClick={goToSearch}>\r\n        Search\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieGrid;\r\n"]},"metadata":{},"sourceType":"module"}